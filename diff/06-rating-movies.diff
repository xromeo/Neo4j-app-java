diff --git a/src/main/java/neoflix/services/RatingService.java b/src/main/java/neoflix/services/RatingService.java
index 45e06e4..1b04ee1 100644
--- a/src/main/java/neoflix/services/RatingService.java
+++ b/src/main/java/neoflix/services/RatingService.java
@@ -2,7 +2,11 @@ package neoflix.services;
 
 import neoflix.AppUtils;
 import neoflix.Params;
+import neoflix.ValidationException;
+
 import org.neo4j.driver.Driver;
+import org.neo4j.driver.Values;
+import org.neo4j.driver.exceptions.NoSuchRecordException;
 
 import java.util.HashMap;
 import java.util.List;
@@ -60,13 +64,37 @@ public class RatingService {
      */
     // tag::add[]
     public Map<String,Object> add(String userId, String movieId, int rating) {
-        // TODO: Convert the native integer into a Neo4j Integer
-        // TODO: Save the rating in the database
-        // TODO: Return movie details and a rating
+        // tag::write[]
+        // Save the rating in the database
+
+        // Open a new session
+        try (var session = this.driver.session()) {
+
+            // Run the cypher query
+            var movie = session.executeWrite(tx -> {
+                String query = """
+                        MATCH (u:User {userId: $userId})
+                        MATCH (m:Movie {tmdbId: $movieId})
+
+                        MERGE (u)-[r:RATED]->(m)
+                        SET r.rating = $rating, r.timestamp = timestamp()
+
+                        RETURN m { .*, rating: r.rating } AS movie
+                        """;
+                var res = tx.run(query, Values.parameters("userId", userId, "movieId", movieId, "rating", rating));
+                return res.single().get("movie").asMap();
+            });
+            // end::write[]
 
-        var copy = new HashMap<>(pulpfiction);
-        copy.put("rating",rating);
-        return copy;
+            // tag::addreturn[]
+            // Return movie details with rating
+            return movie;
+            // end::addreturn[]
+        // tag::throw[]
+        } catch(NoSuchRecordException e) {
+            throw new ValidationException("Movie or user not found to add rating", Map.of("movie", movieId, "user", userId));
+        }
+        // end::throw[]
     }
     // end::add[]
 }
\ No newline at end of file
