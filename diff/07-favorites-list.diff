diff --git a/src/main/java/neoflix/services/FavoriteService.java b/src/main/java/neoflix/services/FavoriteService.java
index 326c108..2947809 100644
--- a/src/main/java/neoflix/services/FavoriteService.java
+++ b/src/main/java/neoflix/services/FavoriteService.java
@@ -2,7 +2,11 @@ package neoflix.services;
 
 import neoflix.AppUtils;
 import neoflix.Params;
+import neoflix.ValidationException;
+
 import org.neo4j.driver.Driver;
+import org.neo4j.driver.Values;
+import org.neo4j.driver.exceptions.NoSuchRecordException;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -43,11 +47,25 @@ public class FavoriteService {
      */
     // tag::all[]
     public List<Map<String, Object>> all(String userId, Params params) {
-        // TODO: Open a new session
-        // TODO: Retrieve a list of movies favorited by the user
-        // TODO: Close session
-
-        return AppUtils.process(userFavorites.getOrDefault(userId, List.of()),params);
+        // Open a new session
+        try (var session = this.driver.session()) {
+            // Retrieve a list of movies favorited by the user
+            var favorites = session.executeRead(tx -> {
+                String query = String.format("""
+                            MATCH (u:User {userId: $userId})-[r:HAS_FAVORITE]->(m:Movie)
+                            RETURN m {
+                            .*,
+                                favorite: true
+                            } AS movie
+                            ORDER BY m.`%s` %s
+                            SKIP $skip
+                            LIMIT $limit
+                        """, params.sort(Params.Sort.title), params.order());
+                var res = tx.run(query, Values.parameters("userId", userId, "skip", params.skip(), "limit", params.limit()));
+                return res.list(row -> row.get("movie").asMap());
+            });
+            return favorites;
+        }
     }
     // end::all[]
 
@@ -63,25 +81,39 @@ public class FavoriteService {
      */
     // tag::add[]
     public Map<String,Object> add(String userId, String movieId) {
-        // TODO: Open a new Session
-        // TODO: Create HAS_FAVORITE relationship within a Write Transaction
-        // TODO: Close the session
-        // TODO: Return movie details and `favorite` property
-
-        var foundMovie = popular.stream().filter(m -> movieId.equals(m.get("tmdbId"))).findAny();
-
-        if (users.stream().anyMatch(u -> u.get("userId").equals(userId)) || foundMovie.isEmpty()) {
-            throw new RuntimeException("Couldn't create a favorite relationship for User %s and Movie %s".formatted(userId, movieId));
+        // Open a new Session
+        try (var session = this.driver.session()) {
+            // tag::create[]
+            // Create HAS_FAVORITE relationship within a Write Transaction
+            var favorite = session.executeWrite(tx -> {
+                String statement = """
+                            MATCH (u:User {userId: $userId})
+                            MATCH (m:Movie {tmdbId: $movieId})
+
+                            MERGE (u)-[r:HAS_FAVORITE]->(m)
+                                    ON CREATE SET r.createdAt = datetime()
+
+                            RETURN m {
+                                .*,
+                                favorite: true
+                            } AS movie
+                        """;
+                var res = tx.run(statement, Values.parameters("userId", userId, "movieId", movieId));
+                // return res.single().get("movie").asMap();
+                return res.single().get("movie").asMap();
+            });
+            // end::create[]
+
+            // tag::return[]
+            // Return movie details and `favorite` property
+            return favorite;
+            // end::return[]
+        // tag::throw[]
+        // Throw an error if the user or movie could not be found
+        } catch (NoSuchRecordException e) {
+            throw new ValidationException(String.format("Couldn't create a favorite relationship for User %s and Movie %s", userId, movieId), Map.of("movie",movieId, "user",userId));
         }
-
-        var movie = foundMovie.get();
-        var favorites = userFavorites.computeIfAbsent(userId, (k) -> new ArrayList<>());
-        if (!favorites.contains(movie)) {
-            favorites.add(movie);
-        }
-        var copy = new HashMap<>(movie);
-        copy.put("favorite", true);
-        return copy;
+        // end::throw[]
     }
     // end::add[]
 
@@ -97,23 +129,35 @@ public class FavoriteService {
      */
     // tag::remove[]
     public Map<String,Object> remove(String userId, String movieId) {
-        // TODO: Open a new Session
-        // TODO: Delete the HAS_FAVORITE relationship within a Write Transaction
-        // TODO: Close the session
-        // TODO: Return movie details and `favorite` property
-        if (users.stream().anyMatch(u -> u.get("userId").equals(userId))) {
-            throw new RuntimeException("Couldn't remove a favorite relationship for User %s and Movie %s".formatted(userId, movieId));
+        // Open a new Session
+        try (var session = this.driver.session()) {
+            // tag::remove[]
+            // Removes HAS_FAVORITE relationship within a Write Transaction
+            var favorite = session.executeWrite(tx -> {
+                String statement = """
+                          MATCH (u:User {userId: $userId})-[r:HAS_FAVORITE]->(m:Movie {tmdbId: $movieId})
+                          DELETE r
+
+                          RETURN m {
+                            .*,
+                            favorite: false
+                          } AS movie
+                        """;
+                var res = tx.run(statement, Values.parameters("userId", userId, "movieId", movieId));
+                return res.single().get("movie").asMap();
+            });
+            // end::remove[]
+
+            // tag::return-remove[]
+            // Return movie details and `favorite` property
+            return favorite;
+            // end::return-remove[]
+        // tag::throw-remove[]
+        // Throw an error if the user or movie could not be found
+        } catch (NoSuchRecordException e) {
+            throw new ValidationException("Could not remove favorite movie for user", Map.of("movie",movieId, "user",userId));
         }
-
-        var movie = popular.stream().filter(m -> movieId.equals(m.get("tmdbId"))).findAny().get();
-        var favorites = userFavorites.computeIfAbsent(userId, (k) -> new ArrayList<>());
-        if (favorites.contains(movie)) {
-            favorites.remove(movie);
-        }
-
-        var copy = new HashMap<>(movie);
-        copy.put("favorite", false);
-        return copy;
+        // end::throw-remove[]
     }
     // end::remove[]
 
