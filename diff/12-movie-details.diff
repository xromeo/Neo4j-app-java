diff --git a/src/main/java/neoflix/services/MovieService.java b/src/main/java/neoflix/services/MovieService.java
index 0938190..c6e7b7a 100644
--- a/src/main/java/neoflix/services/MovieService.java
+++ b/src/main/java/neoflix/services/MovieService.java
@@ -98,10 +98,32 @@ public class MovieService {
      */
     // tag::findById[]
     public Map<String,Object> findById(String id, String userId) {
-        // TODO: Find a movie by its ID
+        // Find a movie by its ID
         // MATCH (m:Movie {tmdbId: $id})
 
-        return popular.stream().filter(m -> id.equals(m.get("tmdbId"))).findAny().get();
+        // Open a new database session
+        try (var session = this.driver.session()) {
+            // Find a movie by its ID
+            return session.executeRead(tx -> {
+                var favorites = getUserFavorites(tx, userId);
+
+                String query = """
+                                MATCH (m:Movie {tmdbId: $id})
+                                RETURN m {
+                                  .*,
+                                    actors: [ (a)-[r:ACTED_IN]->(m) | a { .*, role: r.role } ],
+                                    directors: [ (d)-[:DIRECTED]->(m) | d { .* } ],
+                                    genres: [ (m)-[:IN_GENRE]->(g) | g { .name }],
+                                    ratingCount: size((m)<-[:RATED]-()),
+                                    favorite: m.tmdbId IN $favorites
+                                } AS movie
+                                LIMIT 1
+                        """;
+                var res = tx.run(query, Values.parameters("id", id, "favorites", favorites));
+                return res.single().get("movie").asMap();
+            });
+
+        }
     }
     // end::findById[]
 
@@ -125,14 +147,39 @@ public class MovieService {
      */
     // tag::getSimilarMovies[]
     public List<Map<String,Object>> getSimilarMovies(String id, Params params, String userId) {
-        // TODO: Get similar movies based on genres or ratings
-
-        return AppUtils.process(popular, params).stream()
-                .map(item -> {
-                    Map<String,Object> copy = new HashMap<>(item);
-                    copy.put("score", ((int)(Math.random() * 10000)) / 100.0);
-                    return copy;
-                }).toList();
+        // Get similar movies based on genres or ratings
+        // MATCH (:Movie {tmdbId: $id})-[:IN_GENRE|ACTED_IN|DIRECTED]->()<-[:IN_GENRE|ACTED_IN|DIRECTED]-(m)
+
+        // Open an Session
+        try (var session = this.driver.session()) {
+
+            // Get similar movies based on genres or ratings
+            var movies = session.executeRead(tx -> {
+                var favorites = getUserFavorites(tx, userId);
+                String query = """
+                          MATCH (:Movie {tmdbId: $id})-[:IN_GENRE|ACTED_IN|DIRECTED]->()<-[:IN_GENRE|ACTED_IN|DIRECTED]-(m)
+                          WHERE m.imdbRating IS NOT NULL
+
+                          WITH m, count(*) AS inCommon
+                          WITH m, inCommon, m.imdbRating * inCommon AS score
+                          ORDER BY score DESC
+
+                          SKIP $skip
+                          LIMIT $limit
+
+                          RETURN m {
+                            .*,
+                              score: score,
+                              favorite: m.tmdbId IN $favorites
+                          } AS movie
+                        """;
+                var res = tx.run(query, Values.parameters("id", id, "skip", params.skip(), "limit", params.limit(), "favorites", favorites));
+                // Get a list of Movies from the Result
+                return res.list(row -> row.get("movie").asMap());
+            });
+
+            return movies;
+        }
     }
     // end::getSimilarMovies[]
 
