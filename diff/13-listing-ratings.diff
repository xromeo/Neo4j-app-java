diff --git a/src/main/java/neoflix/services/MovieService.java b/src/main/java/neoflix/services/MovieService.java
index c6e7b7a..0938190 100644
--- a/src/main/java/neoflix/services/MovieService.java
+++ b/src/main/java/neoflix/services/MovieService.java
@@ -98,32 +98,10 @@ public class MovieService {
      */
     // tag::findById[]
     public Map<String,Object> findById(String id, String userId) {
-        // Find a movie by its ID
+        // TODO: Find a movie by its ID
         // MATCH (m:Movie {tmdbId: $id})
 
-        // Open a new database session
-        try (var session = this.driver.session()) {
-            // Find a movie by its ID
-            return session.executeRead(tx -> {
-                var favorites = getUserFavorites(tx, userId);
-
-                String query = """
-                                MATCH (m:Movie {tmdbId: $id})
-                                RETURN m {
-                                  .*,
-                                    actors: [ (a)-[r:ACTED_IN]->(m) | a { .*, role: r.role } ],
-                                    directors: [ (d)-[:DIRECTED]->(m) | d { .* } ],
-                                    genres: [ (m)-[:IN_GENRE]->(g) | g { .name }],
-                                    ratingCount: size((m)<-[:RATED]-()),
-                                    favorite: m.tmdbId IN $favorites
-                                } AS movie
-                                LIMIT 1
-                        """;
-                var res = tx.run(query, Values.parameters("id", id, "favorites", favorites));
-                return res.single().get("movie").asMap();
-            });
-
-        }
+        return popular.stream().filter(m -> id.equals(m.get("tmdbId"))).findAny().get();
     }
     // end::findById[]
 
@@ -147,39 +125,14 @@ public class MovieService {
      */
     // tag::getSimilarMovies[]
     public List<Map<String,Object>> getSimilarMovies(String id, Params params, String userId) {
-        // Get similar movies based on genres or ratings
-        // MATCH (:Movie {tmdbId: $id})-[:IN_GENRE|ACTED_IN|DIRECTED]->()<-[:IN_GENRE|ACTED_IN|DIRECTED]-(m)
-
-        // Open an Session
-        try (var session = this.driver.session()) {
-
-            // Get similar movies based on genres or ratings
-            var movies = session.executeRead(tx -> {
-                var favorites = getUserFavorites(tx, userId);
-                String query = """
-                          MATCH (:Movie {tmdbId: $id})-[:IN_GENRE|ACTED_IN|DIRECTED]->()<-[:IN_GENRE|ACTED_IN|DIRECTED]-(m)
-                          WHERE m.imdbRating IS NOT NULL
-
-                          WITH m, count(*) AS inCommon
-                          WITH m, inCommon, m.imdbRating * inCommon AS score
-                          ORDER BY score DESC
-
-                          SKIP $skip
-                          LIMIT $limit
-
-                          RETURN m {
-                            .*,
-                              score: score,
-                              favorite: m.tmdbId IN $favorites
-                          } AS movie
-                        """;
-                var res = tx.run(query, Values.parameters("id", id, "skip", params.skip(), "limit", params.limit(), "favorites", favorites));
-                // Get a list of Movies from the Result
-                return res.list(row -> row.get("movie").asMap());
-            });
-
-            return movies;
-        }
+        // TODO: Get similar movies based on genres or ratings
+
+        return AppUtils.process(popular, params).stream()
+                .map(item -> {
+                    Map<String,Object> copy = new HashMap<>(item);
+                    copy.put("score", ((int)(Math.random() * 10000)) / 100.0);
+                    return copy;
+                }).toList();
     }
     // end::getSimilarMovies[]
 
diff --git a/src/main/java/neoflix/services/RatingService.java b/src/main/java/neoflix/services/RatingService.java
index 1b04ee1..a2a1e09 100644
--- a/src/main/java/neoflix/services/RatingService.java
+++ b/src/main/java/neoflix/services/RatingService.java
@@ -44,9 +44,25 @@ public class RatingService {
      */
     // tag::forMovie[]
     public List<Map<String,Object>> forMovie(String id, Params params) {
-        // TODO: Get ratings for a Movie
+        // Open a new database session
+        try (var session = this.driver.session()) {
 
-        return AppUtils.process(ratings,params);
+            // Get ratings for a Movie
+            return session.executeRead(tx -> {
+                String query = String.format("""
+                        MATCH (u:User)-[r:RATED]->(m:Movie {tmdbId: $id})
+                        RETURN r {
+                            .rating,
+                            .timestamp,
+                             user: u { .id, .name }
+                        } AS review
+                        ORDER BY r.`%s` %s
+                        SKIP $skip
+                        LIMIT $limit""", params.sort(Params.Sort.timestamp), params.order());
+                var res = tx.run(query, Values.parameters("id", id, "limit", params.limit(), "skip", params.skip()));
+                return res.list(row -> row.get("review").asMap());
+            });
+        }
     }
     // end::forMovie[]
 
